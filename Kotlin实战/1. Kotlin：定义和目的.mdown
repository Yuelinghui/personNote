# Kotlin：定义和目的

Kotlin是一种针对Java平台的新编程语言。**简洁**，**安全**，**务实**，专注于与Java代码的**互操作性**。

Kotlin可以很好地和所有现存的Java库和框架一起工作，而且性能水平和Java旗鼓相当！

## Kotlin的主要特性

1. 首要目标是提供一种更简洁，更高效，更安全的替代Java的语言，并且适用于现今使用Java的所有环境。
2. Kotlin和Java一样是一种**静态类型**的编程语言。**所有表达式的类型在编译期已经确定了**，编译器就能验证对象是否包含了想访问的方法或者字段。与Java不同的是，**Kotlin不需要在源代码中显式地声明每个变量的类型**，变量类型可以根据上下文来自动判断。

    ```
    val x = 1;
    ```

    在声明这个变量的时候，Kotlin会自动判断它的类型是Int。

    这种从上下文推断变量类型的能力称为：*类型推导*

    1. 性能：方法调用速度更快，因为不需要在运行时才来判断调用的是哪个方法
    2. 可靠性：编译器验证了程序的正确性，运行时崩溃的概率更低
    3. 可维护性：陌生代码更容易维护，因为可以看到代码中用到的对象的类型
    4. 工具支持：静态类型使能够提供可靠的重构，精确的代码补全以及其他特性

3.  函数式和面向对象。

    函数式编程的核心概念：

    * 头等函数：把函数（一小段行为）当作值使用，可以用变量保存它，把它当作参数传递，或者当作其他函数的返回值。
    * 不可变性：使用不可变对象，保证了它们的状态在其创建之后不能再变化。
    * 无副作用：使用的是纯函数。在输入相同时会产生同样的结果，并且不会修改其他对象的状态，也不会和外界交互。
    
    函数式编程风格带来的好处：

    * 简洁：函数式风格的代码比相应的命令式风格的代码更优雅，更简练。因为把函数当作值可以获得更强大的抽象能力，避免重复代码。
    * 多线程安全：使用的是不可变数据结构和纯函数，能保证在不同的线程上修改同一份数据这样不安全的操作根本不会发生。
    * 测试更贱容易。无副作用的函数可以独立地进行测试，因为不需要写大量的设置代码来构造它们所依赖的整个环境。

    Kotlin拥有丰富的特性集从一开始就支持函数式编程风格（Java 8 之前的Java版本就缺少这种支持。）

    1. 函数类型：允许函数接受其他函数作为参数，或者返回其他函数
    2. *lambda*表达式：用最少的样板代码方便地传递代码块
    3. 数据类：提供了创建不可变值对象的简明语法
    4. 标准库中包含了丰富的API集合，用函数式编程风格操作对象和集合

4. 免费并且开源.Kotlin语言是完全开源的，并且可以自由使用。

## Kotlin的设计哲学

1. 务实：Kotlin就是一门设计出来解决现实世界问题的使用语言。Kotlin也没有强制使用某种特定的编程风格和范式。

2. 简洁：语言的语法清晰地表达了被阅读的代码的意图，没有因为达成意图所需的样板代码而晦涩难懂。写的代码都具有实际的意义，而不是仅仅为了满足代码结构的需要。Kotlin有丰富的标准库，用库方法调用来替代冗长重复的代码段。对*lambda*的支持，让小代码块可以轻松的传递给参数。

3. 安全：试图实现比Java更高的安全级别，同时保持更低的总体成本。Kotlin努力地从程序中消除NullPointException，因为Kotlin有不可空变量和可空变量，会禁止运行时可能导致空指针异常的操作。Kotlin还有助于避免ClassCastException，一旦检查过类型，不需要额外的转换就能直接饮用属于这个类型的成员。

4. 互操作性：Kotlin在互操作性上更上一层楼，让Java代码也可以毫不费力的调用Kotlin的代码。同时，在最大程度上使用现有的Java库，这意味着调用Java API 时，**永远不需要包装或者转换这些Java对象**。所有Kotlin提供的丰富的API*在运行时没有任何额外的开销*

## 总结

* Kotlin是静态类型语言并且支持类型推导，允许维护正确性与性能的同时保持源代码的简洁。

* Kotlin支持面向对象和函数式编程两种编程风格，通过*头等函数*使更高级别的抽象成为可能，通过支持不可变值简化了测试和多线程开发。

* 在服务区端应用程序中工作得很好，全面支持所有现存的Java框架。在Android上它也可以工作。

* 它是免费和开源的，全面支持主流的IDE和构建系统

* Kotlin是务实的，安全的，简洁的，与Java可互操作性，意味着它专注于使用已经证明过的解决方案处理常见任务。
